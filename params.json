{
  "name": "Javascript-style-guide",
  "tagline": "Skcript's Javascript Style Guide",
  "body": "# Javascript-Style-Guide\r\nSkcript's Javascript Style Guide. This repo is meant to be subjective, and has been created based on our personal learnings. It's heavily inspired by [AirBnb’s Javascript Style Guide](https://github.com/airbnb/javascript). In fact, the below are modifications/additions to it. \r\n\r\n### Common\r\n- Two spaces are used everywhere.\r\n- Absolutely no console.logs in production.\r\n- Don’t save references to this. Use bind if you are unable to access React's scope in a function.\r\n\r\n```\r\n// bad\r\nfunction foo() {\r\n  const self = this;\r\n  return function () {\r\n    console.log(self);\r\n  };\r\n}\r\n\r\n\r\n// bad\r\nfunction foo() {\r\n  const that = this;\r\n  return function () {\r\n    console.log(that);\r\n  };\r\n}\r\n\r\n\r\n// good\r\nfunction foo() {\r\n  return () => {\r\n    console.log(this);\r\n  };\r\n}\r\n```\r\n\r\n- If the property/method is a boolean, use isVal() or hasVal()\r\n\r\n```\r\n// bad\r\nif (!dragon.age()) {\r\n  return false;\r\n}\r\n\r\n\r\n// good\r\nif (!dragon.hasAge()) {\r\n  return false;\r\n}\r\n```\r\n\r\n- Do not add spaces inside brackets and curly braces.\r\n\r\n```\r\n// bad\r\nconst foo = [  1, 2, 3  ];\r\nconst foo = { clark: 'kent' };\r\n\r\n// good\r\nconst foo = [1, 2, 3];\r\nconst foo = {clark: 'kent'};\r\n```\r\n\r\n### Variables\r\n\r\n#### Naming Conventions\r\n- Variables for values follow snake case.\r\n\r\n```\r\nvar main_content;\r\nvar selected_image_id;\r\n```\r\n\r\n- Variables for functions follow camel case.\r\n\r\n```\r\nvar showFiles = function showFiles(file) {\r\n  // Logic...\r\n}\r\n```\r\n\r\n- Keys defined in objects follow camel case.\r\n\r\n```\r\nvar info = {\r\n  companyName: \"Skcript\",\r\n  officeLocation: \"Chennai\"\r\n};\r\n```\r\n\r\n- Classnames follow pascal case.\r\n\r\n```\r\nvar TaskShow = React.createClass({});\r\nPrefix jQuery object variables with a $\r\n\r\n// bad\r\nconst sidebar = $('.sidebar');\r\n\r\n\r\n// good\r\nconst $sidebar = $('.sidebar');\r\n\r\n\r\n// good\r\nconst $sidebarBtn = $('.sidebar-btn');\r\n```\r\n\r\n#### Good Practices\r\n- All variables must be defined at the top of the function before using them.\r\n- Assign default values for variables which require them.\r\n- Define variables from external libraries first.\r\n- Logically separate variable groups with new lines.\r\n- Do no use reserved variable names.\r\n- All variable definitions must end with a semicolon.\r\n\r\n```\r\nrender: function() {\r\n  var Modal = ReactBootstrap.Modal;\r\n  let count = 0;\r\n  let multiplier = 5;\r\n\r\n  if (this.props.sample == 10) {\r\n    count = multiplier x this.props.sample;\r\n  }\r\n}\r\n```\r\n\r\n- Objects are defined with their keys staring in a new line and then two spaces.\r\n\r\n```\r\nvar info = {\r\n  companyName: \"Skcript\",\r\n  officeLocation: \"Chennai\"\r\n};\r\n```\r\n\r\n#### Using var, const and let\r\n- Use const for all of your references that do not change during the cycle.\r\n\r\n**Why?** This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.\r\n\r\n```\r\n// bad\r\nvar a = 1;\r\nvar b = 2;\r\n\r\n\r\n// good\r\nconst a = 1;\r\nconst b = 2;\r\n```\r\n\r\n- If you must reassign references, use let instead of var\r\n\r\n**Why?** let is block-scoped rather than function-scoped like var.\r\n\r\n```\r\n// bad\r\nvar count = 1;\r\nif (true) {\r\n  count += 1;\r\n}\r\n\r\n\r\n// good, use the let.\r\nlet count = 1;\r\nif (true) {\r\n  count += 1;\r\n}\r\n```\r\n\r\n_Note that both let and const are block-scoped._\r\n\r\n```\r\n// const and let only exist in the blocks they are defined in.\r\n{\r\n  let a = 1;\r\n  const b = 1;\r\n}\r\nconsole.log(a); // ReferenceError\r\nconsole.log(b); // ReferenceError\r\n```\r\n\r\n### React Component Variables\r\n- Props passed to the component are each defined in a new line, with a two space indent.\r\n- Closing tags for components end on the same line as the last prop.\r\n- If there are less than 3 props, pass them along the same line.\r\n\r\n```\r\n// bad\r\n  <UserThumbnail user={user} className=\"small\" admin={true} color= \"SpaceGray\" />\r\n\r\n// bad\r\n<UserThumbnail\r\n                                 user={user}\r\n                                 className=\"small\"\r\n                                 admin={true}\r\n                                 color= \"SpaceGray\"\r\n/>\r\n\r\n// bad\r\n<UserThumbnail user={user}\r\n                                 className=\"small\"\r\n                                 admin={true}\r\n                                 color= \"SpaceGray\"\r\n/>\r\n\r\n// good\r\n<UserThumbnail\r\n  user={user}\r\n  className=\"small\"\r\n  admin={true}\r\n  color= \"SpaceGray\" />\r\n```\r\n\r\n### Functions\r\n#### Naming Conventions\r\n- Always use camelCase for function names.\r\n- Avoid single letter names. Be descriptive with your naming.\r\n\r\n#### Good Practices\r\n- Each function must be atomic. I.E, must do only a single thing.\r\n- All functions must be DRY in nature. (Avoid repetition)\r\n- Add comments above the function name to describe it’s purpose.\r\n- If functions are complex in nature, add comments within also.\r\n- Map functions should generally be restricted to taking one parameter.\r\n- Map functions should be named in plural case, and their parameter in the singular.\r\n\r\n```\r\nvar showAssignees = function showAssignees(assignee) {\r\n  return <li key={assignee.id}>{assignee.name}</li>;\r\n}\r\n```\r\n\r\n#### Syntax\r\n- Functions names are preceded with a `:` and the name function.\r\n\r\n```\r\nshowDate: function()\r\n```\r\n- Single space is given after just before the `{` starts.\r\n\r\n```\r\n// bad\r\nshowDate: function(){\r\n  // Logic\r\n},\r\n\r\n// good\r\nshowDate: function() {\r\n  // Logic\r\n},\r\n```\r\n\r\n### Conditionals\r\n#### Good Practice\r\n- Leave a blank line after blocks and before the next statement.\r\n\r\n```\r\n// bad\r\nif (foo) {\r\n  return bar;\r\n}\r\nreturn baz;\r\n\r\n\r\n// good\r\nif (foo) {\r\n  return bar;\r\n}\r\n\r\n\r\nreturn baz;\r\n```\r\n\r\n- Do not pad your blocks with blank lines.\r\n\r\n```\r\n// bad\r\nfunction bar() {\r\n\r\n\r\n  console.log(foo);\r\n\r\n\r\n}\r\n\r\n\r\n// also bad\r\nif (baz) {\r\n\r\n\r\n  console.log(qux);\r\n} else {\r\n  console.log(foo);\r\n\r\n\r\n}\r\n\r\n\r\n// good\r\nfunction bar() {\r\n  console.log(foo);\r\n}\r\n\r\n\r\n// good\r\nif (baz) {\r\n  console.log(qux);\r\n} else {\r\n  console.log(foo);\r\n}\r\n```\r\n\r\n#### Syntax\r\n- Else statements immediately precede the if statements. On the same line.\r\n\r\n```\r\n// bad\r\nif (baz) {\r\n  console.log(qux);\r\n}\r\nelse {\r\n  console.log(foo);\r\n}\r\n\r\n// good\r\nif (baz) {\r\n  console.log(qux);\r\n} else {\r\n  console.log(foo);\r\n}\r\n```\r\n\r\n- If comparing array length, more than once. Save the length to a variable.\r\n\r\n```\r\n// bad\r\nif (this.props.users.length == 0) {\r\n  console.log(\"0 users\");\r\n} else if (this.props.users.length == 1) {\r\n  console.log(\"1 user\");\r\n} else {\r\n  console.log(this.props.users.length + \" users\");\r\n}\r\n\r\n// good\r\nvar length = this.props.users.length;\r\n\r\nif (length == 0) {\r\n  console.log(\"0 users\");\r\n} else if (length == 1) {\r\n  console.log(\"1 user\");\r\n} else {\r\n  console.log(length + \" users\");\r\n}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}